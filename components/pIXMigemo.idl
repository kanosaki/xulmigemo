#include "nsISupports.idl"
#include "nsIObserver.idl"
#include "nsIFile.idl"
#include "nsIDOMWindow.idl"
#include "nsIDOMDocument.idl"
#include "nsIDOMRange.idl"
#include "nsIDOMNode.idl"
#include "nsIVariant.idl"


/* Utilities: You can use them for your language without additional implementation. */

[scriptable, uuid(4341d5c8-cde6-11db-8314-0800200c9a66)]
interface pIXMigemoFileAccess : nsISupports
{
	AString getAbsolutePath(in AString filePath);
	AString getRelativePath(in AString filePath);
	AString getExistingPath(in AString absoluteOrRelativePath);
	AString readFrom(in nsIFile file, in ACString encoding);
	nsIFile writeTo(in nsIFile file, in AString content, in ACString encoding);
};

[scriptable, uuid(79ccb624-1dd4-11dc-8314-0800200c9a66)]
interface pIXMigemoTextUtils : nsISupports
{
	AString trim(in AString input);
	nsIVariant brushUpTerms(in nsIVariant termsArray);
	nsIVariant splitByBoundaries(in AString input);

	AString range2Text(in nsIDOMRange range);

	AString sanitize(in AString regexpPattern);
	AString sanitize2(in AString regexpPattern);

	boolean isRegExp(in AString regexpPattern);
	AString extractRegExpSource(in AString regexpPattern);

	nsIVariant getMatchedTermsFromSource(in AString regexpPattern, in AString source);
	AString getORFindRegExpFromTerms(in nsIVariant termsArray);
	AString getANDFindRegExpFromTerms(in nsIVariant termsArray);

	AString reverseRegExp(in AString regexpPattern); /* obsolete */

	nsIDOMRange getFoundRange(in nsIDOMWindow frame);
	boolean isRangeOverlap(in nsIDOMRange baseRange, in nsIDOMRange targetRange);
	void delayedSelect(in nsIDOMNode anchorNode, in unsigned long length, in boolean isHighlight);

	void selectContent(in nsIDOMNode parentNode, in unsigned long startOffset, in unsigned long length, in boolean isHighlight);
	void selectContentWithDelay(in nsIDOMNode parentNode, in unsigned long startOffset, in unsigned long length, in boolean isHighlight);

	void setSelectionLook(in nsIDOMDocument document, in boolean changeColor);
	void setSelectionLookForDocument(in nsIDOMDocument document, in boolean changeColor);
	void setSelectionLookForNode(in nsIDOMNode selectionContainer, in boolean changeColor);
	void setSelectionLookForRange(in nsIDOMRange selectionRange, in boolean changeColor);
};

[scriptable, uuid(159add54-cdf2-11db-8314-0800200c9a66)]
interface pIXMigemoCache : nsISupports
{
	AString getCacheFor(in AString roman);

	/* these two methods saves the file cache automatically. if you don't want to be updated the file, use "clearCacheSilentlyFor". */
	void clearCacheForAllPatterns(in AString roman);
	void clearCacheFor(in AString roman);

	void clearCacheSilentlyFor(in AString roman);

	void clearAll(in boolean clearDiskCache);

	void setMemCache(in AString roman, in AString regExpPattern);
	void setDiskCache(in AString roman, in AString regExpPattern);

	attribute nsIFile cacheFile;
	attribute nsIFile cacheDir;

	readonly attribute boolean initialized;

	boolean load();
	void reload();
	void save();

	void initWithFileName(in AString fileName);
};




/* Common Interfaces: You have to implement these interfaces for your language. */

[scriptable, uuid(451dc43c-1dd5-11dc-8314-0800200c9a66)]
interface pIXMigemoTextTransform : nsISupports
{
	boolean isValidInput(in AString input);
	AString normalizeInput(in AString input);
	AString normalizeKeyInput(in AString input);

	AString addLatinModifiers(in AString simpleLatinLetters);
	AString removeLatinModifiers(in AString latinLettersWithModifiers);
};

[scriptable, uuid(5a51a982-1dde-11dc-8314-0800200c9a66)]
interface pIXMigemoDictionary : nsISupports
{
	AString getDic();
	AString getUserDic();
	void saveUserDic();

	const unsigned short RESULT_OK                      = 1;
	const unsigned short RESULT_ERROR_INVALID_INPUT     = 2;
	const unsigned short RESULT_ERROR_ALREADY_EXIST     = 4;
	const unsigned short RESULT_ERROR_NOT_EXIST         = 8;
	const unsigned short RESULT_ERROR_NO_TARGET         = 16;
	const unsigned short RESULT_ERROR_INVALID_OPERATION = 32;

	unsigned short addTerm(in AString input, in AString term);
	unsigned short removeTerm(in AString input, in AString term);

	readonly attribute boolean initialized;

	boolean load();
	void reload();
};

[scriptable, uuid(7d78f05c-36f8-11dc-8314-0800200c9a66)]
interface pIXMigemoDictionaryUniversal : pIXMigemoDictionary
{
	attribute ACString lang;
};

[scriptable, uuid(1a2493f2-1f31-11dc-8314-0800200c9a66)]
interface pIXMigemoEngine : nsIObserver
{
	/* create regular expressions from roman letters. */
	AString getRegExpFor(in AString input);

	nsIVariant splitInput(in AString input);

	/* get entries of words in the dictionary. */
	nsIVariant gatherEntriesFor(
		in AString input,
		in unsigned short targetDictionaryType
	);
	const unsigned short SYSTEM_DIC = 1;
	const unsigned short USER_DIC   = 2;
	const unsigned short ALL_DIC    = 3; /* SYSTEM_DIC + USER_DIC */

	readonly attribute pIXMigemoDictionary dictionary;
	readonly attribute pIXMigemoTextTransform textTransform;
};

[scriptable, uuid(0cfd00c2-36fb-11dc-8314-0800200c9a66)]
interface pIXMigemoEngineUniversal : pIXMigemoEngine
{
	attribute ACString lang;
};



[scriptable, uuid(4ec63ba8-ce38-11db-8314-0800200c9a66)]
interface pIXMigemoDicManager : nsIObserver
{
	void reload();

	readonly attribute pIXMigemoDictionary dictionary;
	readonly attribute pIXMigemoCache cache;

	void init(in pIXMigemoDictionary dictionary, in pIXMigemoCache cache);

	AString showDirectoryPicker(in AString defaultDirectoryPath);
};


[scriptable, uuid(181378ba-ce43-11db-8314-0800200c9a66)]
interface pIXMigemo : pIXMigemoEngine
{
	readonly attribute pIXMigemoEngine engine;

	/* create regular expressions from roman letters. */
	AString getRegExp(in AString input);
	nsIVariant getRegExps(in AString input); /* for input split by whitespace characters */

	/* find by regular expression, and return the first item of found terms as DOM2 Range. */
	nsIDOMRange regExpFind(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMRange startPoint,
		in nsIDOMRange endPoint,
		in boolean findBackwards
	);
	/* this returns all of found terms as an array. */
	nsIVariant regExpFindArr(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMRange startPoint,
		in nsIDOMRange endPoint
	);

	nsIVariant regExpHighlightText(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMNode surroundNode
	);

	nsIVariant regExpHighlightTextWithSelection(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMNode surroundNode,
		in nsISupports selectionController
	);

	nsIVariant flattenRegExp(
		in AString regExpSource
	);

	attribute double createCacheTimeOverride;
	readonly attribute pIXMigemoCache cache;
	readonly attribute pIXMigemoDicManager dictionaryManager;

	void init(in ACString language);
};


[scriptable, uuid(63a6c07c-1f48-11dc-8314-0800200c9a66)]
interface pIXMigemoFactory : nsISupports
{
	pIXMigemo getService(in ACString lang);
};



[scriptable, uuid(54606802-ce50-11db-8314-0800200c9a66)]
interface pIXMigemoFind : nsIObserver
{
	attribute pIXMigemo core;

	/* target node; <xul:browser/>, <xul:tabbrowser/> or <xul:iframe/> */
	attribute nsIDOMNode target;

	attribute boolean isLinksOnly;
	attribute boolean isQuickFind;

	attribute unsigned short findMode;

	const unsigned short FIND_MODE_NATIVE = 1;
	const unsigned short FIND_MODE_MIGEMO = 2;
	const unsigned short FIND_MODE_REGEXP = 4;

	readonly attribute AString lastKeyword;
	readonly attribute AString previousKeyword;
	readonly attribute AString lastFoundWord;

	AString appendKeyword(in AString character);
	AString replaceKeyword(in AString keyword);
	AString removeKeyword(in double length);
	void shiftLastKeyword();

	void find(in boolean backward, in AString keyword, in boolean forceFocus);
	void findNext(in boolean forceFocus);
	void findPrevious(in boolean forceFocus);

	const unsigned short NOTFOUND          = 0;
	const unsigned short FOUND             = 1;
	const unsigned short WRAPPED           = 2;
	const unsigned short FOUND_IN_LINK     = 4;
	const unsigned short FOUND_IN_EDITABLE = 8;
	const unsigned short FINISH_FIND       = 16; /* for internal purpose */

	const unsigned short FIND_DEFAULT     = 1;
	const unsigned short FIND_BACK        = 2;
	const unsigned short FIND_FORWARD     = 4;
	const unsigned short FIND_WRAP        = 8;
	const unsigned short FIND_IN_LINK     = 128;
	const unsigned short FIND_IN_EDITABLE = 256;

	void setSelectionLook(in nsIDOMDocument document, in boolean changeColor);

	void scrollSelectionToCenter(in nsIDOMWindow frame);

	void clear(in boolean focusToFoundTarget);
	void exitFind(in boolean focusToFoundTarget);
};



/* Japanese Interfaces: Special Subclasses for Japanese language. */

[scriptable, uuid(749f4faa-cdf6-11db-8314-0800200c9a66)]
interface pIXMigemoTextTransformJa : pIXMigemoTextTransform
{
	AString roman2kana(in AString roman);
	AString roman2kana2(in AString roman, in unsigned short kanaFlag);
	AString getKana(in AString key, in unsigned short kanaFlag);
	const unsigned short KANA_HIRA = 1;
	const unsigned short KANA_KATA = 2;
	const unsigned short KANA_ALL  = 4;

	AString hira2roman(in AString hiragana); // hiragana => roman
	AString hira2kata(in AString hiragana); // hiragana => katakana
	AString kata2hira(in AString katakana); // katakana => hiragana

	AString zenkaku2hankaku(in AString zenkaku); // fullwidth alphabets => ASCII
	AString roman2zen(in AString roman); // ASCII => fullwidth alphabets

	AString normalizeForYomi(in AString yomigana);
	boolean isYomi(in AString yomigana);

	AString joinVoiceMarks(in AString hiragana);

	AString expand(in AString roman);
	AString expand2(in AString roman, in unsigned short kanaFlag);
};


[scriptable, uuid(6f19900a-ce33-11db-8314-0800200c9a66)]
interface pIXMigemoDictionaryJa : pIXMigemoDictionary
{
	AString getDicFor(in ACString key);
	AString getUserDicFor(in ACString key);

	AString getAlphaDic();
	AString getUserAlphaDic();

	AString getDicForTerm(in AString input);

	void saveUserDicFor(in ACString key);
};
