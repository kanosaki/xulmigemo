#include "nsISupports.idl"
#include "domstubs.idl"
#include "nsIObserver.idl"
#include "nsIFile.idl"
#include "nsIVariant.idl"
#include "nsIDOMWindow.idl"
#include "nsIDOMDocument.idl"
#include "nsIDOMRange.idl"
#include "nsIDOMElement.idl"
#include "nsIDOMNode.idl"

interface nsIFile;
interface nsIVariant;
interface nsIDOMWindow;
interface nsIDOMDocument;
interface nsIDOMRange;
interface nsIDOMElement;
interface nsIDOMNode;


/* Utilities: You can use them for your language without additional implementation. */

[scriptable, uuid(4aca3120-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoFileAccess : nsISupports
{
	AString getAbsolutePath(in AString filePath);
	AString getRelativePath(in AString filePath);
	AString getExistingPath(in AString absoluteOrRelativePath);
	AString readFrom(in nsIFile file, in ACString encoding);
	nsIFile writeTo(in nsIFile file, in AString content, in ACString encoding);
};

[scriptable, uuid(50188780-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoTextUtils : nsISupports
{
	AString trim(in AString input);
	nsIVariant brushUpTerms(in nsIVariant termsArray);
	nsIVariant brushUpTermsWithCase(in nsIVariant termsArray);
	nsIVariant splitByBoundaries(in AString input);

	AString range2Text(in nsIDOMRange range);
	AString lazyRange2Text(in nsIDOMRange range); // possibly returns text including "hidden" elemens

	AString sanitize(in AString regexpPattern);
	AString sanitizeForTransformInput(in AString regexpPattern);
	AString sanitizeForTransformOutput(in AString regexpPattern);

	boolean isRegExp(in AString regexpPattern);
	AString extractRegExpSource(in AString regexpPattern);

	nsIVariant getMatchedTermsFromSource(in AString regexpPattern, in AString source);
	AString getORFindRegExpFromTerms(in nsIVariant termsArray);
	AString getANDFindRegExpFromTerms(in nsIVariant termsArray);

	AString reverseRegExp(in AString regexpPattern); /* obsolete */

	nsIDOMRange getFoundRange(in nsIDOMWindow frame);
	boolean isRangeOverlap(in nsIDOMRange baseRange, in nsIDOMRange targetRange);
	unsigned short compareRangePosition(in nsIDOMRange baseRange, in nsIDOMRange targetRange);
	void delayedSelect(in nsIDOMNode anchorNode, in unsigned long length, in boolean isHighlight);

	void selectContent(in nsIDOMNode parentNode, in unsigned long startOffset, in unsigned long length, in boolean isHighlight);
	void selectContentWithDelay(in nsIDOMNode parentNode, in unsigned long startOffset, in unsigned long length, in boolean isHighlight);

	void setSelectionLook(in nsIDOMDocument document, in boolean changeColor);
	void setSelectionLookForDocument(in nsIDOMDocument document, in boolean changeColor);
	void setSelectionLookForNode(in nsIDOMNode selectionContainer, in boolean changeColor);
	void setSelectionLookForRange(in nsIDOMRange selectionRange, in boolean changeColor);
};

[scriptable, uuid(554bdbd0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoCache : nsISupports
{
	AString getCacheFor(
		in AString roman,
		[optional] in unsigned short targetDictionary
	);

	/* these two methods saves the file cache automatically. if you don't want to be updated the file, use "clearCacheSilentlyFor". */
	void clearCacheForAllPatterns(
		in AString roman,
		[optional] in unsigned short targetDictionary
	);
	void clearCacheFor(
		in AString roman,
		[optional] in unsigned short targetDictionary
	);

	void clearCacheSilentlyFor(
		in AString roman,
		[optional] in unsigned short targetDictionary
	);

	void clearAll(
		in boolean clearDiskCache,
		[optional] in unsigned short targetDictionary
	);

	void setMemCache(
		in AString roman,
		in AString regExpPattern,
		[optional] in unsigned short targetDictionary
	);
	void setDiskCache(
		in AString roman,
		in AString regExpPattern,
		[optional] in unsigned short targetDictionary
	);

	nsIFile getCacheFile([optional] in unsigned short targetDictionary);
	void setCacheFile(in nsIFile file, [optional] in unsigned short targetDictionary);
	attribute nsIFile cacheDir;
	/* for backward compatibility: this equals to "getCacheFile()" */
	attribute nsIFile cacheFile;

	readonly attribute boolean initialized;

	boolean load([optional] in unsigned short targetDictionary);
	void reload([optional] in unsigned short targetDictionary);
	void save([optional] in unsigned short targetDictionary);

	void init(in AString fileName, in AString encoding);
};




/* Common Interfaces: You have to implement these interfaces for your language. */

[scriptable, uuid(59da64a0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoTextTransform : nsISupports
{
	boolean isValidInput(in AString input);
	AString normalizeInput(in AString input);
	AString normalizeKeyInput(in AString input);

	AString addLatinModifiers(in AString simpleLatinLetters);
	AString removeLatinModifiers(in AString latinLettersWithModifiers);
};

[scriptable, uuid(5d4ea3d0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoDictionary : nsISupports
{
	attribute ACString lang;

	AString getDic();
	AString getUserDic();
	void saveUserDic();

	const unsigned short RESULT_OK                      = 1;
	const unsigned short RESULT_ERROR_INVALID_INPUT     = 2;
	const unsigned short RESULT_ERROR_ALREADY_EXIST     = 4;
	const unsigned short RESULT_ERROR_NOT_EXIST         = 8;
	const unsigned short RESULT_ERROR_NO_TARGET         = 16;
	const unsigned short RESULT_ERROR_INVALID_OPERATION = 32;

	unsigned short addTerm(in AString input, in AString term);
	unsigned short removeTerm(in AString input, in AString term);

	readonly attribute boolean initialized;

	boolean load();
	void reload();
};

[scriptable, uuid(628b1fe0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoDictionaryUniversal : xmIXMigemoDictionary
{
};

[scriptable, uuid(67027730-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoEngine : nsIObserver
{
	attribute ACString lang;

	/* create regular expressions from roman letters. */
	AString getRegExpFor(
		in AString input,
		[optional] in unsigned short targetDictionary
	);

	nsIVariant splitInput(in AString input);

	/* get entries of words in the dictionary. */
	nsIVariant gatherEntriesFor(
		in AString input,
		[optional] in unsigned short targetDictionary
	);
	const unsigned short SYSTEM_DIC = 1;
	const unsigned short USER_DIC   = 2;
	const unsigned short ALL_DIC    = 3; /* SYSTEM_DIC + USER_DIC */

	readonly attribute xmIXMigemoDictionary dictionary;
	readonly attribute xmIXMigemoTextTransform textTransform;
};

[scriptable, uuid(6b8910c0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoEngineUniversal : xmIXMigemoEngine
{
};



[scriptable, uuid(6f54e5d0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoDicManager : nsIObserver
{
	void reload();

	readonly attribute xmIXMigemoDictionary dictionary;
	readonly attribute xmIXMigemoCache cache;

	void init(in xmIXMigemoDictionary dictionary, in xmIXMigemoCache cache);

	AString showDirectoryPicker(in AString defaultDirectoryPath);
};


[scriptable, uuid(73ce6000-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemo : xmIXMigemoEngine
{
	readonly attribute xmIXMigemoEngine engine;

	/* create regular expressions from roman letters. */
	AString getRegExp(
		in AString input,
		[optional] in unsigned short targetDictionary
	);
	/* for input split by whitespace characters */
	nsIVariant getRegExps(
		in AString input,
		[optional] in unsigned short targetDictionary
	);

	AString getRegExpFunctional(
		in AString input,
		out AString termsRegExp,
		out AString exceptionsRegExp,
		[optional] in unsigned short targetDictionary
	);
	nsIVariant getRegExpsFunctional(
		in AString input,
		out AString termsRegExp,
		out AString exceptionsRegExp,
		[optional] in unsigned short targetDictionary
	);
	boolean isValidFunctionalInput(in AString input);
	AString trimFunctionalInput(in AString input);

	/* find by regular expression, and return the first item of found terms as DOM2 Range. */
	nsIDOMRange regExpFind(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		[optional] in nsIDOMRange startPoint,
		[optional] in nsIDOMRange endPoint,
		[optional] in boolean findBackwards
	);

	/* this returns all of found terms as an array. */
	nsIVariant regExpFindArray(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		[optional] in nsIDOMRange startPoint,
		[optional] in nsIDOMRange endPoint
	);
	/* for backward compatibility */
	nsIVariant regExpFindArr(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		[optional] in nsIDOMRange startPoint,
		[optional] in nsIDOMRange endPoint
	);

	nsIVariant regExpHighlight(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMElement surroundNode
	);

	nsIVariant regExpHighlightSelection(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		[optional] in nsIDOMElement surroundNode
	);

	void clearHighlight(
		in nsIDOMDocument document,
		[optional] in boolean recursively,
		[optional] in boolean selectionOnly,
		[optional] in boolean keepFoundHighlighted
	);
	void repaintHighlights(
		in nsIDOMDocument document,
		[optional] in boolean recursively,
		[optional] in boolean highlighted
	);
	/* returned values: an array of JS obejct which have following properties:
		node                : element node of the "highlight" style
		selectionController : nsISelectionController for the owner document of the highlight
	*/
	nsIVariant getHighlights(
		in nsIDOMDocument document,
		[optional] in boolean recursively
	);

	nsIVariant flattenRegExp(
		in AString regExpSource
	);

	attribute double createCacheTimeOverride;
	readonly attribute xmIXMigemoCache cache;
	readonly attribute xmIXMigemoDicManager dictionaryManager;

	void init(in ACString language);
};


[scriptable, uuid(781a6190-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoFactory : nsISupports
{
	xmIXMigemo getService(in ACString lang);
};



[scriptable, uuid(7c7cd150-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoFind : nsIObserver
{
	attribute xmIXMigemo core;

	/* target node; <xul:browser/>, <xul:tabbrowser/> or <xul:iframe/> */
	attribute nsIDOMElement target;

	attribute boolean isLinksOnly;
	attribute boolean isQuickFind;
	attribute boolean caseSensitive;

	attribute unsigned short findMode;

	const unsigned short FIND_MODE_NATIVE = 1;
	const unsigned short FIND_MODE_MIGEMO = 2;
	const unsigned short FIND_MODE_REGEXP = 4;

	readonly attribute AString lastKeyword;
	readonly attribute AString previousKeyword;
	readonly attribute AString lastFoundWord;

	AString appendKeyword(in AString character);
	AString replaceKeyword(in AString keyword);
	AString removeKeyword(in double length);
	void shiftLastKeyword();

	void find(in boolean backward, in AString keyword, in boolean forceFocus);
	void findNext(in boolean forceFocus);
	void findPrevious(in boolean forceFocus);

	const unsigned short NOTFOUND          = 0;
	const unsigned short FOUND             = 1;
	const unsigned short WRAPPED           = 2;
	const unsigned short FOUND_IN_LINK     = 4;
	const unsigned short FOUND_IN_EDITABLE = 8;
	const unsigned short FINISH_FIND       = 16; /* for internal purpose */

	/* find from document edge */
	const unsigned short FIND_DEFAULT     = 1;
	/* find directions */
	const unsigned short FIND_BACK        = 2;
	const unsigned short FIND_FORWARD     = 4;
	/* status */
	const unsigned short FIND_WRAP        = 8;
	/* filtering */
	const unsigned short FIND_IN_LINK     = 128;
	const unsigned short FIND_IN_EDITABLE = 256;

	void setSelectionLook(in nsIDOMDocument document, in boolean changeColor);

	void scrollSelectionToCenter(in nsIDOMWindow frame);

	nsIDOMElement getParentLinkFromRange(in nsIDOMRange range);

	void clear(in boolean focusToFoundTarget);
	void exitFind(in boolean focusToFoundTarget);
};



/* Japanese Interfaces: Special Subclasses for Japanese language. */

[scriptable, uuid(807d4af0-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoTextTransformJa : xmIXMigemoTextTransform
{
	AString roman2kana(in AString roman);
	AString roman2kana2(in AString roman, in unsigned short kanaFlag);
	AString getKana(in AString key, in unsigned short kanaFlag);
	const unsigned short KANA_HIRA = 1;
	const unsigned short KANA_KATA = 2;
	const unsigned short KANA_ALL  = 4;

	AString hira2roman(in AString hiragana); // hiragana => roman
	AString hira2kata(in AString hiragana); // hiragana => katakana
	AString kata2hira(in AString katakana); // katakana => hiragana

	AString zenkaku2hankaku(in AString zenkaku); // fullwidth alphabets => ASCII
	AString roman2zen(in AString roman); // ASCII => fullwidth alphabets

	AString normalizeForYomi(in AString yomigana);
	boolean isYomi(in AString yomigana);

	AString joinVoiceMarks(in AString hiragana);

	AString expand(in AString roman);
	AString expand2(in AString roman, in unsigned short kanaFlag);
};


[scriptable, uuid(84db9c00-ae38-11de-8a39-0800200c9a66)]
interface xmIXMigemoDictionaryJa : xmIXMigemoDictionary
{
	AString getDicFor(in ACString key);
	AString getUserDicFor(in ACString key);

	AString getAlphaDic();
	AString getUserAlphaDic();

	AString getDicForTerm(in AString input);

	void saveUserDicFor(in ACString key);
};



// backward compatibility
[scriptable, uuid(4341d5c8-cde6-11db-8314-0800200c9a66)]
interface pIXMigemoFileAccess : xmIXMigemoFileAccess {};
[scriptable, uuid(79ccb624-1dd4-11dc-8314-0800200c9a66)]
interface pIXMigemoTextUtils : xmIXMigemoTextUtils {};
[scriptable, uuid(159add54-cdf2-11db-8314-0800200c9a66)]
interface pIXMigemoCache : xmIXMigemoCache {};
[scriptable, uuid(451dc43c-1dd5-11dc-8314-0800200c9a66)]
interface pIXMigemoTextTransform : xmIXMigemoTextTransform {};
[scriptable, uuid(078eaf10-be0c-11de-8a39-0800200c9a66)]
interface pIXMigemoDictionary : xmIXMigemoDictionary {};
[scriptable, uuid(1e9b41f0-be0c-11de-8a39-0800200c9a66)]
interface pIXMigemoDictionaryUniversal : xmIXMigemoDictionaryUniversal {};
[scriptable, uuid(23daa430-be0c-11de-8a39-0800200c9a66)]
interface pIXMigemoEngine : xmIXMigemoEngine {};
[scriptable, uuid(27e81620-be0c-11de-8a39-0800200c9a66)]
interface pIXMigemoEngineUniversal : xmIXMigemoEngineUniversal {};
[scriptable, uuid(4ec63ba8-ce38-11db-8314-0800200c9a66)]
interface pIXMigemoDicManager : xmIXMigemoDicManager {};
[scriptable, uuid(2eacdfe0-be0c-11de-8a39-0800200c9a66)]
interface pIXMigemo : xmIXMigemo
{
	nsIVariant regExpHighlightText(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMElement surroundNode
	);

	nsIVariant regExpHighlightTextWithSelection(
		in AString regExpSource,
		in AString regExpFlags,
		in nsIDOMRange findRange,
		in nsIDOMElement surroundNode
	);
};
[scriptable, uuid(63a6c07c-1f48-11dc-8314-0800200c9a66)]
interface pIXMigemoFactory : xmIXMigemoFactory {};
[scriptable, uuid(47113a90-be0c-11de-8a39-0800200c9a66)]
interface pIXMigemoFind : xmIXMigemoFind {};
[scriptable, uuid(749f4faa-cdf6-11db-8314-0800200c9a66)]
interface pIXMigemoTextTransformJa : xmIXMigemoTextTransformJa {};
[scriptable, uuid(6f19900a-ce33-11db-8314-0800200c9a66)]
interface pIXMigemoDictionaryJa : xmIXMigemoDictionaryJa {};

